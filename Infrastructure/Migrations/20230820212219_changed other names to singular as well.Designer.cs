// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MarketplaceDbContext))]
    [Migration("20230820212219_changed other names to singular as well")]
    partial class changedothernamestosingularaswell
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Listings.Backpack.BackpackBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BackpackBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Backpack.BackpackType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BackpackType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.BaseListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSold")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ListingImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ReasonOfSale")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StateOfItemId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StateOfItemId");

                    b.ToTable("BaseListing");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseListing");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Listings.Clothes.ClothesBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ClothesBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Clothes.ClothesSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ClothesSize");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Clothes.ClothesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ClothesType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.CommonProperties.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Domain.Entities.Listings.CommonProperties.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Domain.Entities.Listings.CommonProperties.StateOfItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StateOfItem");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Cookware.CookwareBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CookwareBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Cookware.CookwareMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CookwareMaterial");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Cookware.CookwareType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CookwareType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Stoves.StoveBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StoveBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Stoves.StoveFuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StoveFuelType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Binoculars.BinocularsType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BinocularsType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Electronics.ElectronicsType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ElectronicsType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.KnivesMultitools.KnifeMultitoolBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KnifeMultitoolBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.KnivesMultitools.KnifeMultitoolType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KnifeMultitoolType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Lighting.LightingBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LightingBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Lighting.LightingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LightingType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.TrekkingPoles.TrekkingPoleBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TrekkingPoleBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.TrekkingPoles.TrekkingPoleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TrekkingPoleType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Shoes.ShoeBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ShoeBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Shoes.ShoeSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ShoeSize");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Shoes.ShoeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ShoeType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Hammocks.HammockBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("HammockBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepAccessories.SleepAcessoryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepAcessoryType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepingBagBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagInsulationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepingBagInsulationType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepingBagSeason");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagShape", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepingBagShape");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagZipSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepingBagZipSide");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingPads.SleepingPadBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepingPadBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingPads.SleepingPadType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SleepingPadType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Tarps.TarpBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TarpBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Tarps.TarpShape", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TarpShape");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Tents.TentBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TentBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.CampingListing", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.BaseListing");

                    b.Property<bool>("Ultralight")
                        .HasColumnType("tinyint(1)");

                    b.Property<float?>("Weight")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("CampingListing");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Backpack.Backpack", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.CampingListing");

                    b.Property<Guid>("BackpackBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BackpackTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<float?>("Volume")
                        .HasColumnType("float");

                    b.HasIndex("BackpackBrandId");

                    b.HasIndex("BackpackTypeId");

                    b.HasIndex("ColorId");

                    b.HasDiscriminator().HasValue("Backpack");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Clothes.Clothes", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.CampingListing");

                    b.Property<Guid>("ClothesBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClothesSizeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClothesTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ClothesBrandId");

                    b.HasIndex("ClothesSizeId");

                    b.HasIndex("ClothesTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("GenderId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("Clothes_ColorId");
                        });

                    b.HasDiscriminator().HasValue("Clothes");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Cooking", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.CampingListing");

                    b.HasDiscriminator().HasValue("Cooking");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Gear", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.CampingListing");

                    b.HasDiscriminator().HasValue("Gear");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Shoes.Shoe", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.CampingListing");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShoeBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShoeSizeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShoeTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ShoeBrandId");

                    b.HasIndex("ShoeSizeId");

                    b.HasIndex("ShoeTypeId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("Shoe_ColorId");

                            t.Property("GenderId")
                                .HasColumnName("Shoe_GenderId");
                        });

                    b.HasDiscriminator().HasValue("Shoe");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Sleeping", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.CampingListing");

                    b.HasDiscriminator().HasValue("Sleeping");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Cookware.Cookware", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Cooking.Cooking");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CookwareBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CookwareMaterialId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CookwareTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("CookwareBrandId");

                    b.HasIndex("CookwareMaterialId");

                    b.HasIndex("CookwareTypeId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("Cookware_ColorId");
                        });

                    b.HasDiscriminator().HasValue("Cookware");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.OtherCooking", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Cooking.Cooking");

                    b.HasDiscriminator().HasValue("OtherCooking");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Stoves.Stove", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Cooking.Cooking");

                    b.Property<Guid>("StoveBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StoveFuelTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("StoveBrandId");

                    b.HasIndex("StoveFuelTypeId");

                    b.HasDiscriminator().HasValue("Stove");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Binoculars.Binoculars", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Gear.Gear");

                    b.Property<Guid>("BinocularsTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("BinocularsTypeId");

                    b.HasDiscriminator().HasValue("Binoculars");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Electronics.Electronics", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Gear.Gear");

                    b.Property<Guid>("ElectronicsTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ElectronicsTypeId");

                    b.HasDiscriminator().HasValue("Electronics");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.KnivesMultitools.KnifeMultitool", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Gear.Gear");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnifeMultitoolBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnifeMultitoolTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("KnifeMultitoolBrandId");

                    b.HasIndex("KnifeMultitoolTypeId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("KnifeMultitool_ColorId");
                        });

                    b.HasDiscriminator().HasValue("KnifeMultitool");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Lighting.Lighting", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Gear.Gear");

                    b.Property<Guid>("LightingBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LightingTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("LightingBrandId");

                    b.HasIndex("LightingTypeId");

                    b.HasDiscriminator().HasValue("Lighting");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.OtherGear", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Gear.Gear");

                    b.HasDiscriminator().HasValue("OtherGear");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.TrekkingPoles.TrekkingPole", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Gear.Gear");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TrekkingPoleBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TrekkingPoleTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("TrekkingPoleBrandId");

                    b.HasIndex("TrekkingPoleTypeId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("TrekkingPole_ColorId");
                        });

                    b.HasDiscriminator().HasValue("TrekkingPole");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Hammocks.Hammock", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Sleeping.Sleeping");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("HammockBrandId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("HammockBrandId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("Hammock_ColorId");
                        });

                    b.HasDiscriminator().HasValue("Hammock");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.OtherSleeping", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Sleeping.Sleeping");

                    b.HasDiscriminator().HasValue("OtherSleeping");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepAccessories.SleepAccessory", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Sleeping.Sleeping");

                    b.Property<Guid>("SleepAcessoryTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("SleepAcessoryTypeId");

                    b.HasDiscriminator().HasValue("SleepAccessory");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBag", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Sleeping.Sleeping");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("ComfortTemperature")
                        .HasColumnType("int");

                    b.Property<int?>("ExtremeTemperature")
                        .HasColumnType("int");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("LimitTemperature")
                        .HasColumnType("int");

                    b.Property<Guid>("SleepingBagBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SleepingBagInsulationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SleepingBagSeasonId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SleepingBagShapeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SleepingBagZipSideId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SleepingBagBrandId");

                    b.HasIndex("SleepingBagInsulationTypeId");

                    b.HasIndex("SleepingBagSeasonId");

                    b.HasIndex("SleepingBagShapeId");

                    b.HasIndex("SleepingBagZipSideId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("SleepingBag_ColorId");

                            t.Property("GenderId")
                                .HasColumnName("SleepingBag_GenderId");
                        });

                    b.HasDiscriminator().HasValue("SleepingBag");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingPads.SleepingPad", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Sleeping.Sleeping");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SleepingPadBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SleepingPadTypeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("SleepingPadBrandId");

                    b.HasIndex("SleepingPadTypeId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("SleepingPad_ColorId");
                        });

                    b.HasDiscriminator().HasValue("SleepingPad");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Tarps.Tarp", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Sleeping.Sleeping");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("char(36)");

                    b.Property<float?>("SizeXMetres")
                        .HasColumnType("float");

                    b.Property<float?>("SizeYMetres")
                        .HasColumnType("float");

                    b.Property<Guid>("TarpBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TarpShapeId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ColorId");

                    b.HasIndex("TarpBrandId");

                    b.HasIndex("TarpShapeId");

                    b.ToTable("BaseListing", t =>
                        {
                            t.Property("ColorId")
                                .HasColumnName("Tarp_ColorId");
                        });

                    b.HasDiscriminator().HasValue("Tarp");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Tents.Tent", b =>
                {
                    b.HasBaseType("Domain.Entities.Listings.Sleeping.Sleeping");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<Guid>("TentBrandId")
                        .HasColumnType("char(36)");

                    b.HasIndex("TentBrandId");

                    b.HasDiscriminator().HasValue("Tent");
                });

            modelBuilder.Entity("Domain.Entities.Listings.BaseListing", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.StateOfItem", "StateOfItem")
                        .WithMany()
                        .HasForeignKey("StateOfItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateOfItem");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Backpack.Backpack", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Backpack.BackpackBrand", "BackpackBrand")
                        .WithMany()
                        .HasForeignKey("BackpackBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Backpack.BackpackType", "BackpackType")
                        .WithMany()
                        .HasForeignKey("BackpackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackpackBrand");

                    b.Navigation("BackpackType");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Clothes.Clothes", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Clothes.ClothesBrand", "ClothesBrand")
                        .WithMany()
                        .HasForeignKey("ClothesBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Clothes.ClothesSize", "ClothesSize")
                        .WithMany()
                        .HasForeignKey("ClothesSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Clothes.ClothesType", "ClothesType")
                        .WithMany()
                        .HasForeignKey("ClothesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.CommonProperties.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClothesBrand");

                    b.Navigation("ClothesSize");

                    b.Navigation("ClothesType");

                    b.Navigation("Color");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Shoes.Shoe", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.CommonProperties.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Shoes.ShoeBrand", "ShoeBrand")
                        .WithMany()
                        .HasForeignKey("ShoeBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Shoes.ShoeSize", "ShoeSize")
                        .WithMany()
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Shoes.ShoeType", "ShoeType")
                        .WithMany()
                        .HasForeignKey("ShoeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Gender");

                    b.Navigation("ShoeBrand");

                    b.Navigation("ShoeSize");

                    b.Navigation("ShoeType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Cookware.Cookware", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Cooking.Cookware.CookwareBrand", "CookwareBrand")
                        .WithMany()
                        .HasForeignKey("CookwareBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Cooking.Cookware.CookwareMaterial", "CookwareMaterial")
                        .WithMany()
                        .HasForeignKey("CookwareMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Cooking.Cookware.CookwareType", "CookwareType")
                        .WithMany()
                        .HasForeignKey("CookwareTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("CookwareBrand");

                    b.Navigation("CookwareMaterial");

                    b.Navigation("CookwareType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Cooking.Stoves.Stove", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Cooking.Stoves.StoveBrand", "StoveBrand")
                        .WithMany()
                        .HasForeignKey("StoveBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Cooking.Stoves.StoveFuelType", "StoveFuelType")
                        .WithMany()
                        .HasForeignKey("StoveFuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoveBrand");

                    b.Navigation("StoveFuelType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Binoculars.Binoculars", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Gear.Binoculars.BinocularsType", "BinocularsType")
                        .WithMany()
                        .HasForeignKey("BinocularsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinocularsType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Electronics.Electronics", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Gear.Electronics.ElectronicsType", "ElectronicsType")
                        .WithMany()
                        .HasForeignKey("ElectronicsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectronicsType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.KnivesMultitools.KnifeMultitool", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Gear.KnivesMultitools.KnifeMultitoolBrand", "KnifeMultitoolBrand")
                        .WithMany()
                        .HasForeignKey("KnifeMultitoolBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Gear.KnivesMultitools.KnifeMultitoolType", "KnifeMultitoolType")
                        .WithMany()
                        .HasForeignKey("KnifeMultitoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("KnifeMultitoolBrand");

                    b.Navigation("KnifeMultitoolType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.Lighting.Lighting", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Gear.Lighting.LightingBrand", "LightingBrand")
                        .WithMany()
                        .HasForeignKey("LightingBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Gear.Lighting.LightingType", "LightingType")
                        .WithMany()
                        .HasForeignKey("LightingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LightingBrand");

                    b.Navigation("LightingType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Gear.TrekkingPoles.TrekkingPole", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Gear.TrekkingPoles.TrekkingPoleBrand", "TrekkingPoleBrand")
                        .WithMany()
                        .HasForeignKey("TrekkingPoleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Gear.TrekkingPoles.TrekkingPoleType", "TrekkingPoleType")
                        .WithMany()
                        .HasForeignKey("TrekkingPoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("TrekkingPoleBrand");

                    b.Navigation("TrekkingPoleType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Hammocks.Hammock", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.Hammocks.HammockBrand", "HammockBrand")
                        .WithMany()
                        .HasForeignKey("HammockBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("HammockBrand");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepAccessories.SleepAccessory", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepAccessories.SleepAcessoryType", "SleepAcessoryType")
                        .WithMany()
                        .HasForeignKey("SleepAcessoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepAcessoryType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBag", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.CommonProperties.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagBrand", "SleepingBagBrand")
                        .WithMany()
                        .HasForeignKey("SleepingBagBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagInsulationType", "SleepingBagInsulationType")
                        .WithMany()
                        .HasForeignKey("SleepingBagInsulationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagSeason", "SleepingBagSeason")
                        .WithMany()
                        .HasForeignKey("SleepingBagSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagShape", "SleepingBagShape")
                        .WithMany()
                        .HasForeignKey("SleepingBagShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepingBags.SleepingBagZipSide", "SleepingBagZipSide")
                        .WithMany()
                        .HasForeignKey("SleepingBagZipSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Gender");

                    b.Navigation("SleepingBagBrand");

                    b.Navigation("SleepingBagInsulationType");

                    b.Navigation("SleepingBagSeason");

                    b.Navigation("SleepingBagShape");

                    b.Navigation("SleepingBagZipSide");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.SleepingPads.SleepingPad", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepingPads.SleepingPadBrand", "SleepingPadBrand")
                        .WithMany()
                        .HasForeignKey("SleepingPadBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.SleepingPads.SleepingPadType", "SleepingPadType")
                        .WithMany()
                        .HasForeignKey("SleepingPadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("SleepingPadBrand");

                    b.Navigation("SleepingPadType");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Tarps.Tarp", b =>
                {
                    b.HasOne("Domain.Entities.Listings.CommonProperties.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.Tarps.TarpBrand", "TarpBrand")
                        .WithMany()
                        .HasForeignKey("TarpBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Listings.Sleeping.Tarps.TarpShape", "TarpShape")
                        .WithMany()
                        .HasForeignKey("TarpShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("TarpBrand");

                    b.Navigation("TarpShape");
                });

            modelBuilder.Entity("Domain.Entities.Listings.Sleeping.Tents.Tent", b =>
                {
                    b.HasOne("Domain.Entities.Listings.Sleeping.Tents.TentBrand", "TentBrand")
                        .WithMany()
                        .HasForeignKey("TentBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TentBrand");
                });
#pragma warning restore 612, 618
        }
    }
}
